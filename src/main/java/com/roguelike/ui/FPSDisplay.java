package com.roguelike.ui;

import com.almasb.fxgl.dsl.FXGL;
import javafx.animation.AnimationTimer;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.effect.DropShadow;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;

/**
 * FPSÊòæÁ§∫ÁªÑ‰ª∂ - Áî®‰∫éË∞ÉËØïÊòæÁ§∫ÂΩìÂâçÂ∏ßÊï∞
 */
public class FPSDisplay {
    private Label fpsLabel;
    private StackPane fpsContainer;
    private AnimationTimer fpsUpdater;
    private boolean isVisible = false;
    
    // FPSËÆ°ÁÆóÁõ∏ÂÖ≥
    private long lastTime = 0;
    private int frameCount = 0;
    private double currentFPS = 0.0;
    private long lastFPSUpdate = 0;
    private static final long FPS_UPDATE_INTERVAL = 100_000_000; // 100msÊõ¥Êñ∞‰∏ÄÊ¨°FPSÊòæÁ§∫
    
    // Á™óÂè£Â∞∫ÂØ∏Áõ∏ÂÖ≥
    private double currentScreenWidth;
    private double currentScreenHeight;
    
    public FPSDisplay() {
        initFPSDisplay();
    }
    
    /**
     * ÂàùÂßãÂåñFPSÊòæÁ§∫ÁªÑ‰ª∂
     */
    private void initFPSDisplay() {
        // Ëé∑ÂèñÂàùÂßãÁ™óÂè£Â∞∫ÂØ∏
        updateScreenDimensions();
        
        // ÂàõÂª∫FPSÊ†áÁ≠æ
        fpsLabel = new Label("FPS: --");
        fpsLabel.setTextFill(Color.LIME);
        fpsLabel.setFont(Font.font("Consolas", 14));
        
        // Ê∑ªÂä†Èò¥ÂΩ±ÊïàÊûú
        DropShadow shadow = new DropShadow();
        shadow.setColor(Color.BLACK);
        shadow.setRadius(2);
        shadow.setOffsetX(1);
        shadow.setOffsetY(1);
        fpsLabel.setEffect(shadow);
        
        // ËÆæÁΩÆËÉåÊôØÊ†∑Âºè
        fpsLabel.setStyle(
            "-fx-background-color: rgba(0, 0, 0, 0.7); " +
            "-fx-background-radius: 4; " +
            "-fx-padding: 4 8 4 8; " +
            "-fx-border-color: rgba(0, 255, 0, 0.5); " +
            "-fx-border-width: 1; " +
            "-fx-border-radius: 4;"
        );
        
        // ÂàõÂª∫ÂÆπÂô®
        fpsContainer = new StackPane();
        fpsContainer.getChildren().add(fpsLabel);
        fpsContainer.setPickOnBounds(false);
        
        // ËÆæÁΩÆ‰ΩçÁΩÆÔºàÂè≥‰∏äËßíÔºâ
        StackPane.setAlignment(fpsContainer, Pos.TOP_RIGHT);
        fpsContainer.setTranslateX(-10); // Ë∑ùÁ¶ªÂè≥Ëæπ10ÂÉèÁ¥†
        fpsContainer.setTranslateY(10);  // Ë∑ùÁ¶ªÈ°∂ÈÉ®10ÂÉèÁ¥†
        
        // ÂàùÂßãÁä∂ÊÄÅ‰∏∫ÈöêËóè
        fpsContainer.setVisible(false);
        
        // Â∞ÜÂÆπÂô®Ê∑ªÂä†Âà∞Âú∫ÊôØ‰∏≠Ôºå‰ΩÜ‰øùÊåÅÈöêËóèÁä∂ÊÄÅ
        FXGL.getGameScene().addUINode(fpsContainer);
        
        // ÂàùÂßãÂåñFPSÊõ¥Êñ∞Âô®
        initFPSUpdater();
    }
    
    /**
     * ÂàùÂßãÂåñFPSÊõ¥Êñ∞Âô®
     */
    private void initFPSUpdater() {
        fpsUpdater = new AnimationTimer() {
            @Override
            public void handle(long now) {
                if (!isVisible) {
                    return;
                }
                
                // ËÆ°ÁÆóFPS
                if (lastTime == 0) {
                    lastTime = now;
                    lastFPSUpdate = now;
                    return;
                }
                
                frameCount++;
                
                // ÊØè100msÊõ¥Êñ∞‰∏ÄÊ¨°FPSÊòæÁ§∫
                if (now - lastFPSUpdate >= FPS_UPDATE_INTERVAL) {
                    double elapsed = (now - lastFPSUpdate) / 1_000_000_000.0; // ËΩ¨Êç¢‰∏∫Áßí
                    currentFPS = frameCount / elapsed;
                    
                    // Êõ¥Êñ∞ÊòæÁ§∫
                    updateFPSDisplay();
                    
                    // ÈáçÁΩÆËÆ°Êï∞Âô®
                    frameCount = 0;
                    lastFPSUpdate = now;
                }
            }
        };
    }
    
    /**
     * Êõ¥Êñ∞FPSÊòæÁ§∫
     */
    private void updateFPSDisplay() {
        if (fpsLabel != null) {
            // Ê†πÊçÆFPSÂÄºËÆæÁΩÆ‰∏çÂêåÈ¢úËâ≤
            if (currentFPS >= 55) {
                fpsLabel.setTextFill(Color.LIME);      // ÁªøËâ≤ - ËâØÂ•Ω
            } else if (currentFPS >= 30) {
                fpsLabel.setTextFill(Color.YELLOW);    // ÈªÑËâ≤ - ‰∏ÄËà¨
            } else {
                fpsLabel.setTextFill(Color.RED);       // Á∫¢Ëâ≤ - ËæÉÂ∑Æ
            }
            
            // Êõ¥Êñ∞ÊñáÊú¨
            fpsLabel.setText(String.format("FPS: %.1f", currentFPS));
        }
    }
    
    /**
     * ÊòæÁ§∫FPS
     */
    public void show() {
        if (!isVisible) {
            isVisible = true;
            fpsContainer.setVisible(true);
            fpsUpdater.start();
            System.out.println("üìä FPSÊòæÁ§∫Â∑≤ÂºÄÂêØ");
        }
    }
    
    /**
     * ÈöêËóèFPS
     */
    public void hide() {
        if (isVisible) {
            isVisible = false;
            fpsContainer.setVisible(false);
            if (fpsUpdater != null) {
                fpsUpdater.stop();
            }
            System.out.println("üìä FPSÊòæÁ§∫Â∑≤ÂÖ≥Èó≠");
        }
    }
    
    /**
     * ÂàáÊç¢FPSÊòæÁ§∫Áä∂ÊÄÅ
     */
    public void toggle() {
        if (isVisible) {
            hide();
        } else {
            show();
        }
    }
    
    /**
     * Ê£ÄÊü•ÊòØÂê¶ÂèØËßÅ
     */
    public boolean isVisible() {
        return isVisible;
    }
    
    /**
     * Ëé∑ÂèñÂΩìÂâçFPSÂÄº
     */
    public double getCurrentFPS() {
        return currentFPS;
    }
    
    /**
     * Êõ¥Êñ∞Â±èÂπïÂ∞∫ÂØ∏
     */
    private void updateScreenDimensions() {
        currentScreenWidth = FXGL.getAppWidth();
        currentScreenHeight = FXGL.getAppHeight();
    }
    
    /**
     * ËÆæÁΩÆÁ™óÂè£Â∞∫ÂØ∏ÂèòÂåñÁõëÂê¨Âô®
     */
    public void setupWindowResizeListener() {
        AnimationTimer resizeChecker = new AnimationTimer() {
            private double lastWidth = currentScreenWidth;
            private double lastHeight = currentScreenHeight;

            @Override
            public void handle(long now) {
                double currentWidth = FXGL.getAppWidth();
                double currentHeight = FXGL.getAppHeight();

                // Ê£ÄÊü•Â∞∫ÂØ∏ÊòØÂê¶ÂèëÁîüÂèòÂåñ
                if (Math.abs(currentWidth - lastWidth) > 1 || Math.abs(currentHeight - lastHeight) > 1) {
                    updateScreenDimensions();
                    lastWidth = currentWidth;
                    lastHeight = currentHeight;
                }
            }
        };
        resizeChecker.start();
    }
    
    /**
     * Ê∏ÖÁêÜËµÑÊ∫ê
     */
    public void cleanup() {
        if (fpsUpdater != null) {
            fpsUpdater.stop();
        }
        if (fpsContainer != null && FXGL.getGameScene() != null) {
            FXGL.getGameScene().removeUINode(fpsContainer);
        }
    }
}
